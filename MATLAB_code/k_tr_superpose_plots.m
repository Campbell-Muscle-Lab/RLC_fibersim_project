function k_tr_superpose_plots
% Function create a figure with ktr traces superimposition for different
%models

% Path 
addpath(genpath('../../MATLAB_Utilities'))
addpath(genpath('../../MATLAB_SAS'))

% Variables
sim_data_folder = '../Simulations/caterinas_playground/d/sim_data/sim_output';
data_file_string = '../output/k_tr_analysis_fixed.xlsx';
results_file_string = 'sas_results/sas_results';
output_image_file= '../output/ktr_Czone_12';
output_image_types = {'png', 'eps'};
conditions_to_draw = [2, 4]

f_scaling_factor = 0.001

test_variable = 'k_tr'
factor_1 = 'hs_length'
factor_2 = 'RLC_phosp'
sheet = "Sheet1"

% Display 
color_map  = [1 0.6 0; 0.8 0 1];

trace_line_width = 2
t_ticks = [0.99 1.15]
x_label_offset = -0.15

y_label_offset = -0.3;

y_labels = {'Length','(um)' ...
               {'Force', '(mN mm^{-2})'}};

sl_labels = {'1.9 µm', '2.3 µm'};
legend_labels = {'ctrl', 'cMLCK'};

jitter_main_label_offset = 0.45;
jitter_sub_label_offset = 0.025;
jitter_y_label_offset = -0.2;
jitter_title_y_offset = 2;
jitter_y_axis_label = {'k_{tr}','(s^{-1})'};
jitter_marker_size = 24;
jitter_marker_transparency = 0.5;


% Code 

% Figure layout
height_adjustments = [0 -1.4 0 0]
bottom_adjustments = [0 1.4 0 0]

sp = initialise_publication_quality_figure(...
    'no_of_panels_wide', 2,...
    'no_of_panels_high', 2, ...
    'x_to_y_axes_ratio', 1.5, ...
    'right_margin', 1, ...
    'individual_padding', 1, ...
    'left_pads', [1.2, 0.6, 1.2, 0.6], ...
    'right_pads', [0.5, 0.5, 0.5, 0.5], ...
    'axes_padding_top', 0 , ...
    'axes_padding_bottom', 0.4, ...
    'individual_panel_labels', {'A', 'B', '', ''}, ...
    'panel_label_y_offset', [0 1.4 0 0], ...
    'top_margin', 0.4, ...
    'bottom_margin', 0.2,...
    'omit_panels', [4],...
    'height_subplot_adjustments', height_adjustments, ...
    'bottom_subplot_adjustments', bottom_adjustments);

% Traces plot
% Loop through the conditions to draw 
for cond_counter = 1 : numel(conditions_to_draw)
    
    % Generate the folder name 
    cond_data_folder = fullfile(sim_data_folder,...
                       sprintf('%i', conditions_to_draw(cond_counter)))

    % Pull off all the txt files in the cond_data folder
    sim_files = findfiles ('txt', cond_data_folder)'
    
    % Loop through the files
    for sim_counter = 1: numel(sim_files)

        % Read the files 
        d = readtable(sim_files{sim_counter})

        % Set the visible data point 
        ti = find((d.time> t_ticks(1)) &...
             (d.time<t_ticks(end)));
    
        %Length
        plot_index = 1
        subplot(sp(plot_index))
        hold on
        h(cond_counter) = plot(d.time(ti),  d.hs_1_length(ti), '-', ...
                        'LineWidth', trace_line_width, ...
                        'Color', color_map(cond_counter, :));
        
        % Force
        plot_index = 3 
        subplot(sp(plot_index))
        hold on;
        plot(d.time(ti), f_scaling_factor * d.hs_1_force(ti), ...
            '-', 'LineWidth', trace_line_width,'Color',...
            color_map(cond_counter, :))
    end
end

% Add legend
legendflex(h, legend_labels, ...
    'anchor', {'se','se'}, ...
    'buffer', [0 10], ...
    'padding', [3 3 6], ...
    'xscale', 0.3, ...
    'FontSize', 12, ...
    'FontName', 'Arial');

% Tidy up the formatting 
subplot(sp(1))
improve_axes(...
   'x_axis_off', 1 , ...
   'y_axis_label', {'hs length','(nm)'},...
   'x_tick_decimal_places',0,...
   'x_ticks', t_ticks, ...
   'y_ticks', ([1110 1160]),...
   'y_label_offset', y_label_offset,...
   'y_tick_decimal_places', 0); 

subplot(sp(3))
improve_axes(...
   'x_axis_off', 0 , ...
   'x_axis_label', {'Time (s)'} , ...
   'y_axis_label', {'Force','(kN m^{-2})'},...
   'x_tick_decimal_places',0,...
   'x_ticks', t_ticks, ...
   'x_tick_decimal_places',1,...
   'y_ticks', ([0 150]),...
   'y_label_offset', y_label_offset,...
   'y_tick_decimal_places', 0);

% Plot data from excel
b = readtable(data_file_string)

% Get it into format for jitter plot 
[od, jd] = extract_two_way_data( ...
    'table', b, ...
    'parameter_string', test_variable, ...
    'factor_1', factor_1, ...
    'factor_2', factor_2)

stats = sas_two_way_anova_without_grouping( ...
    'excel_file_string', data_file_string, ...
    'test_variable', test_variable, ...
    'factor_1', factor_1, ...
    'factor_2', factor_2, ...
    'calling_path_string', cd, ...
    'results_file_string', results_file_string)

% Pull out the main effects, write to title_string
p_string = write_p_table_to_string(stats.p_table)
vi = regexp(p_string,'\n')
title_string = p_string(1:vi(3)-1);

% Draw the jitter plot
plot_index = 2
subplot(sp(plot_index))
hold on
jd_out = jitter_plot( ...
                'data', jd, ..., ...
                'group_names', sl_labels, ...
                'sub_names', legend_labels, ...
                'symbols', {'o'}, ...
                'marker_face_colors', color_map, ...
                'marker_transparency', jitter_marker_transparency, ...
                'marker_size', jitter_marker_size, ...
                'y_ticks', [0 multiple_greater_than(max(od.k_tr), 5)], ...
                'y_tick_decimal_places', 0, ...
                'y_label_offset',jitter_y_label_offset, ...
                'y_axis_label',jitter_y_axis_label, ...
                'y_main_label_offset', jitter_main_label_offset,...
                'y_sub_label_offset', jitter_sub_label_offset,...
                'title', title_string, ...
                'title_y_offset', jitter_title_y_offset);

% Pull out the stat lines
stat_line_data = return_stat_lines( ...
    '2way_LMM_without_grouping', ...
    stats.p_table, ...
    factor_1, factor_2, jd(1).f1_strings, jd(1).f2_strings, ...
    jd_out.y_ticks, 0.15)

% Draw them
stat_lines('line_data', stat_line_data)

% Output
for type_counter = 1 : numel(output_image_types)
    figure_export( ...
        'output_file_string', output_image_file, ...
        'output_type', output_image_types{type_counter});
end


